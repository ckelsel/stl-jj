// 这是一个 input iterator 能够 "来自某一basic_istream"的对象执行
// 格式化输入操作， 注意 此版本为旧有之 HP 规格 未符合标准接口
// istream_iterator<T, charT, traits, Distance>
// 然而一般使用 input iterators 时都只使用第一个template参数 此时以下仍适用
// 注： SGI STL 3.3 已实现出符合标准接口的istream_iterator 做法与本版本大同小异
// 版本可读性较高

template <class T, class Distance = ptrdiff_t>
class istream_iterator
{
 friend bool operator == _STL_NULL_TMPL_ARGS ( const istream_iterator<T, Distance>& x, const istream_iterator<T, Distance>& y);
 
// 以上语法很奇特 
 protected:
    istream* stream;
    T value;
    bool end_marker;
    void read()
    {
	end_marker = (*stream) ? true : false;
	if (end_marker) * stream >> value ; // 关键
	// 以上 输入之后 stream 的状态可能改变， 所以下面在判断一次以决定 end_marker
	// 当eof 或 读到型别不符的资料 stream 即处于 false 状态
        end_marker = (*stream) ? true : false;
   }
 public:
    typedef input_iterator_tag iterator_category;
    typedef Distance           value_type;
    typedef const T*           pointer;
    typedef const T&           reference;
 // 以上 因身为 input iterator 所以采用const 比较保险

    istream_iterator() : stream(&cin), end_marker(false) {}
    istream_iterator() : stream(&s)     { read(); }
 // 以上两行的用法
 // istream_iterator<int> eos;         造成 end_marker 为 false
 // istream_iterator<int> initer(cin); 引发 read() 至此会等待输入
 // 因此 下面这两行客户端程序：
 // istream_iterator<int> initer(cin);   (A)
 // cout << "please input ..." <<endl;   (B)
 // 会停留在 （A） 等待一个输入 然后才执行(B) 出现提示信息 这是不合理的现象
 // 规避之道 永远在最必要的时候 才定义一个 istream_iterator*();
}
