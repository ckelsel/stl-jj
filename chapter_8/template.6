// 以下配接器用来将某个 Adaptable Binary function 转换为 unary Function
template <class Operation>
class binder1st : public unary_function <typename Operation :: second_argument_type, typenmae Operation::result_type>
{
 protected:
    Operation op; // 内部成员
    typename Operation::first_argument_type value; // 内部成员
 public:
 // construct
    binder1st(const Operation& x, const typename Operation::first_argument_type& y) : op(x), value(y)
    {
	
    }
    typename Operation::result_type
    operator() (const typename Operation::second_argument_type& x) const
    {
	return op(value, x);  // 实际调用表达式 并将value绑定为第一个参数
    }
}；

// 辅助函数 让我们得以方便使用 binder1st<op>
template <class Operation, class T>
inline binder1st<Operation> bind1st(const Operation& op, const T& x)
{
 typedef typename Operation::first_argument_type arg1_type;
 return binder1st<Operation>(op, arg1_type(x));
     // 以上 注意 先把x转型为op的第一参数型别
}

// ------------------------------------------------------------------ //
// 以下配接器用来将某个 Adaptable Binary function 转型为 Unary Function
template <class Operation>
class binder2nd : public unary_function<typename Operation::first_argument_type, typename Operation::result_type>
{
 protected:
    Operation op; // 内部成员
    typename Operation::second_argument_type value; // 内部成员
 public:
 // construct
    binder2nd(const Operation& x, const typename Operation::second_argument_type& y):op(x), value(y){}  // 将表达式和第一个参数记录于内部成员

    typename Operation::result_type 
    operator() (const typename Operation::first_argument_type& x) const
    {
	return op(x, value);  // 实际调用表达式 并将 value 绑定为第二个参数

    }
   
}；

// 辅助函数 使我们得以 方便的使用 binder2nd<OP>

template <class Operation, class T>
inline binder2nd<Operation> bind2nd(const Operation& op, const T& x)
{
	typedef typename Operation::second_argument_type arg2_type;
	return binder2nd<Operation>(op, arg2_type(x));
	// 注意把 x 转型为 op 的第二个参数型别
}
