//file: 6algobase.cpp
#include <algorithm>
#include <vector>
#include <functional>
#include <iostream>
#include <iterator>
#include <string>
using namespace std;

template <class T>
struct display 
{
	void operator () (const T& x) const
	{
		cout << x << ' ';
	}
}

int main()
{
	int ia[9] = {0,1,2,3,4,5,6,7,8};
	vector<int> iv1(ia, ia+5);
	vector<int> iv2(ia, ia+9);

	// {0,1,2,3,4} v.s {0,1,2,3,4,5,6,7,8 }
	cout << *(mismatch(iv1.begin(), iv1.end(), iv2.begin()).first);
	cout << *(mismatch(iv1.begin(), iv1.end(), iv2.begin()).second);
	// 判断两个区间不匹配的点， 返回一个由两个迭代器组成的pair
	// 上述写法很危险， 应该先判断迭代器是否不等于容器的end(), 然后可以做输出操作
	// 如果两个序列在[first, last)区间内相等， equal() 返回true
	// 如果两个序列的元素比较多， 多出来的元素不予考虑

	cout << equal (iv1.begin(), iv1.end(), &ia[3]);
	// {0,1,2,3,4} 不等于 {3,4,5,6,7}

	fill (iv1.begin(), iv1.end(), 9);
	for_each(iv1.begin(), iv1.end(), display<int>());

	fill_n(iv1.begin(), 3, 7);
	for_each(iv1.begin(), iv1.end(), display<int>());

	vector<int>::iterator ite1 = iv1.begin();
	vector<int>::iterator ite2 = iv1;
	advance (ite2, 3);

	iter_swap(it1, ite2);
	cout << *ite1 << ' ' << ite2 <<endl;
	for_each(iv1.begin(), iv1.end(), display<int>());

	cout << max(*it1, *ite2) << endl;
	cout << min(*ite1, *ite2) << endl;

	swap(*iv1.begin(), iv2.begin());
	for_each(iv1.begin(), iv1.end(), display<int>());
	for_each(iv2.begin(), iv2.end(), display<int>());

	string stra1[] = {"Jamie", "JJhou", "Jason"};
	string stra2[] = {"Jamie", "JJhou", "Jerry"};

	cout <<lexicographical_compare(stra1, stra1+2, star2, stra2+2);

	cout << lexicographical_compare (stra1, stra1+2, star2, star2+2, greater<string>());

}
